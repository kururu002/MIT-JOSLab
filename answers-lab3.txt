1.What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
Each exception has different works to do, and there are serveral ways to handle these exptions, such as some exception keeps going(I/O interreupt), while some exception needs to pull the program.(divided by 0)

2.Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
When executing in user enviorment, it cause general protection fault first(13), while excuting in kernel mode, it cause page fault(14)
3.The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
It's a same case as 2., if we generate with previlige 3, it can do exception 13.

4.What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
The low previlige program should'd be able to access higher previlige part(as described in mmu.h), in order to avoid user programs corrupt kernerl.
