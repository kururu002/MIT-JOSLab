Ex1:
static void *
boot_alloc(uint32_t n)
{
	static char *nextfree;	// virtual address of next byte of free memory
	char *result;

	// Initialize nextfree if this is the first time.
	// 'end' is a magic symbol automatically generated by the linker,
	// which points to the end of the kernel's bss segment: //bss means static varibles that are not initialized
	// the first virtual address that the linker did *not* assign
	// to any kernel code or global variables.
	if (!nextfree) {
		extern char end[];
		nextfree = ROUNDUP((char *) end, PGSIZE);//round up is for alignment ex:roundup(640,PGSIZE)->4096
	}

	// Allocate a chunk large enough to hold 'n' bytes, then update
	// nextfree.  Make sure nextfree is kept aligned
	// to a multiple of PGSIZE.
	if(n > 0){
	result=nextfree;
  	nextfree =ROUNDUP(nextfree+n, PGSIZE);
		if(nextfree== KADDR(PADDR(nextfree))return result;  	//check if legal
	}else if(n==0){
  		return nextfree;
	}

	return NULL;
}

Where is the kernel
	//     in physical memory?  Which pages are already in use for
	//     page tables and other data structures?
kernel is in 0x10000c , UVPT are in used for page tables

Ex2:
(qemu) info mem
0000000000000000-0000000000400000 0000000000400000 -r-
00000000f0000000-00000000f0400000 0000000000400000 -rw
(qemu) info registers 
EAX=f01001a4 EBX=00000000 ECX=000003d4 EDX=000003fd
ESI=00000000 EDI=00000001 EBP=f0112f18 ESP=f0112f0c
EIP=f0100161 EFL=00000082 [--S----] CPL=0 II=0 A20=1 SMM=0 HLT=0
ES =0010 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
CS =0008 00000000 ffffffff 00cf9a00 DPL=0 CS32 [-R-]
SS =0010 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
DS =0010 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
FS =0010 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
GS =0010 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
LDT=0000 00000000 0000ffff 00008200 DPL=0 LDT
TR =0000 00000000 0000ffff 00008b00 DPL=0 TSS32-busy
GDT=     00007c4c 00000017
IDT=     00000000 000003ff
CR0=80010011 CR2=00000000 CR3=00113000 CR4=00000000
DR0=00000000 DR1=00000000 DR2=00000000 DR3=00000000 
DR6=ffff0ff0 DR7=00000400
EFER=0000000000000000
FCW=037f FSW=0000 [ST=0] FTW=00 MXCSR=00001f80
FPR0=0000000000000000 0000 FPR1=0000000000000000 0000
FPR2=0000000000000000 0000 FPR3=0000000000000000 0000
FPR4=0000000000000000 0000 FPR5=0000000000000000 0000
FPR6=0000000000000000 0000 FPR7=0000000000000000 0000
XMM00=00000000000000000000000000000000 XMM01=00000000000000000000000000000000
XMM02=00000000000000000000000000000000 XMM03=00000000000000000000000000000000
XMM04=00000000000000000000000000000000 XMM05=00000000000000000000000000000000
XMM06=00000000000000000000000000000000 XMM07=00000000000000000000000000000000

(qemu) xp /100x 0x100000
0000000000100000: 0x1badb002 0x00000000 0xe4524ffe 0x7205c766
0000000000100010: 0x34000004 0x3000b812 0x220f0011 0xc0200fd8
0000000000100020: 0x0100010d 0xc0220f80 0x10002fb8 0xbde0fff0
0000000000100030: 0x00000000 0x113000bc 0x0002e8f0 0xfeeb0000
0000000000100040: 0x83e58955 0xacb80cec 0x2df01159 0xf0115304
0000000000100050: 0x68006a50 0xf0115304 0x002422e8 0x04bee800
0000000000100060: 0xc4830000 0x1aac6808 0x60680000 0xe8f01029
0000000000100070: 0x000016cb 0x6a08c483 0x29cc6816 0xbce8f010
0000000000100080: 0x83000016 0x00680cc4 0x68fffffc 0x00000400
0000000000100090: 0x10297b68 0x16a5e8f0 0x59e80000 0x8300000f
00000000001000a0: 0xec8310c4 0xe8006a0c 0x00000949 0xeb10c483
00000000001000b0: 0xe58955f1 0x758b5356 0x203d8310 0x00f01153
00000000001000c0: 0x35893775 0xf0115320 0x5d8dfcfa 0x04ec8314
00000000001000d0: 0xff0c75ff 0x97680875 0xe8f01029 0x0000165f
00000000001000e0: 0x5308c483 0x162fe856 0x04c70000 0x102a0524
00000000001000f0: 0x1649e8f0 0xc4830000 0x0cec8310 0xf2e8006a
0000000000100100: 0x83000008 0xf1eb10c4 0x53e58955 0x8d08ec83
0000000000100110: 0x75ff145d 0x0875ff0c 0x1029af68 0x161de8f0
0000000000100120: 0xc4830000 0x75ff5308 0x15ebe810 0x04c70000
0000000000100130: 0x102a0524 0x1605e8f0 0xc4830000 0xfc5d8b10
0000000000100140: 0x8955c3c9 0x03fdbae5 0xa8ec0000 0xba0b7401
0000000000100150: 0x000003f8 0xc0b60fec 0xffb805eb 0x5dffffff
0000000000100160: 0xe58955c3 0x04ec8353 0x2bebc389 0x2774c085
0000000000100170: 0x55640d8b 0x518df011 0x64158901 0x88f01155
0000000000100180: 0x11536081 0x00fa81f0 0x75000002 0x6405c70a
(qemu) x /100x 0xf0100000
f0100000: 0x1badb002 0x00000000 0xe4524ffe 0x7205c766
f0100010: 0x34000004 0x3000b812 0x220f0011 0xc0200fd8
f0100020: 0x0100010d 0xc0220f80 0x10002fb8 0xbde0fff0
f0100030: 0x00000000 0x113000bc 0x0002e8f0 0xfeeb0000
f0100040: 0x83e58955 0xacb80cec 0x2df01159 0xf0115304
f0100050: 0x68006a50 0xf0115304 0x002422e8 0x04bee800
f0100060: 0xc4830000 0x1aac6808 0x60680000 0xe8f01029
f0100070: 0x000016cb 0x6a08c483 0x29cc6816 0xbce8f010
f0100080: 0x83000016 0x00680cc4 0x68fffffc 0x00000400
f0100090: 0x10297b68 0x16a5e8f0 0x59e80000 0x8300000f
f01000a0: 0xec8310c4 0xe8006a0c 0x00000949 0xeb10c483
f01000b0: 0xe58955f1 0x758b5356 0x203d8310 0x00f01153
f01000c0: 0x35893775 0xf0115320 0x5d8dfcfa 0x04ec8314
f01000d0: 0xff0c75ff 0x97680875 0xe8f01029 0x0000165f
f01000e0: 0x5308c483 0x162fe856 0x04c70000 0x102a0524
f01000f0: 0x1649e8f0 0xc4830000 0x0cec8310 0xf2e8006a
f0100100: 0x83000008 0xf1eb10c4 0x53e58955 0x8d08ec83
f0100110: 0x75ff145d 0x0875ff0c 0x1029af68 0x161de8f0
f0100120: 0xc4830000 0x75ff5308 0x15ebe810 0x04c70000
f0100130: 0x102a0524 0x1605e8f0 0xc4830000 0xfc5d8b10
f0100140: 0x8955c3c9 0x03fdbae5 0xa8ec0000 0xba0b7401
f0100150: 0x000003f8 0xc0b60fec 0xffb805eb 0x5dffffff
f0100160: 0xe58955c3 0x04ec8353 0x2bebc389 0x2774c085
f0100170: 0x55640d8b 0x518df011 0x64158901 0x88f01155
f0100180: 0x11536081 0x00fa81f0 0x75000002 0x6405c70a

Same!!!

Question:uintptr_t
2:
Entry	Base Virtual Address	Points to (logically):
1023	?	Page table for top 4MB of phys memory
1022	?	?
.	?	?
957	0xef400000	page directroy itself(PDX[UVPT) KTSTACK
956	0xef000000	UPAGE
			pages
			.
			.
2	0x00800000	?
1	0x00400000	?
0	0x00000000	[see next question]

3:
The protect bits:
// Page table/directory entry flags.
#define PTE_P		0x001	// Present
#define PTE_W		0x002	// Writeable
#define PTE_U		0x004	// User
4:
2G
5:
Pages 4MB
PT 2MB
kern_pgdir 4KB
Total:6MB+4KB

6:
Kernel must setup page directory and alloc pages

Challenge:
The function iterate through each element inside that range and print it in hexadecimal format. 
